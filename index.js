var express = require('express');
var cookieParser = require('cookie-parser');
var compress = require('compression');

var bodyParser = require('body-parser');

var logger = require('morgan');

var errorHandler = require('errorhandler');

var methodOverride = require('method-override');
var request = require('request');
var Epub = require('epub-gen');
var EpubGenerator = require('epub-generator');
var path = require('path');
var http = require('http');
var html2epub = require('html2epub');
var bodyParser = require('body-parser');
var expressValidator = require('express-validator');
var fs = require('fs');
//var q = require('q');
//var async = require('async');
var app = express();

/**
 * Express configuration.
 */
app.set('port', process.env.PORT || 80);
app.set('views', '.');
app.set('view engine', 'jade');
app.use(compress());

app.use(logger('dev'));

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(expressValidator());
app.use(methodOverride());
app.use(cookieParser());

app.all('*', function(req, res, next) {


    /**
     * Response settings
     * @type {Object}
     */
    var responseSettings = {
        "AccessControlAllowOrigin": req.headers.origin,
        "AccessControlAllowHeaders": "Content-Type,X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5,    Date, X-Api-Version, X-File-Name",
        "AccessControlAllowMethods": "POST, GET, PUT, DELETE, OPTIONS",
        "AccessControlAllowCredentials": true
    };

    /**
     * Headers
     */
    res.header("Access-Control-Allow-Credentials", responseSettings.AccessControlAllowCredentials);
    res.header("Access-Control-Allow-Origin", responseSettings.AccessControlAllowOrigin);
    res.header("Access-Control-Allow-Headers", (req.headers['access-control-request-headers']) ? req.headers['access-control-request-headers'] : "x-requested-with");
    res.header("Access-Control-Allow-Methods", (req.headers['access-control-request-method']) ? req.headers['access-control-request-method'] : responseSettings.AccessControlAllowMethods);

    if ('OPTIONS' == req.method) {
        res.send(200);
    }
    else {
        next();
    }


});


app.use(function(req, res, next) {
    res.locals.user = req.user;
    next();
});
app.use('/reader', express.static(__dirname));
app.get('/reader/:file', function(req, res, next) {
    // var ePub = require('epub.js');

    // new ePub(path.resolve(__dirname, req.params.file));
    res.render('index');

});

app.get('/download/:id', function(req, res, next) {
    //  if(req.hostname == ('localhost'||'micoff.local'||'lexlab.io')){
    var FIREBASE_URL = process.env.FIREBASE_URL || 'https://lexlab.firebaseio.com';
    var FIREBASE_SECRET = process.env.FIREBASE_SECRET;
    // }else{



    //          var FIREBASE_URL = process.env.FIREBASE_URL;
    //         var FIREBASE_SECRET = process.env.FIREBASE_SECRET;

    // }
    var date = new Date().getTime();
    var output = path.join(__dirname, 'dist', date + '.epub');
    fs.mkdir('./dist/' + date);
    var reportdata = req.params.id;
    console.log(reportdata);
    var Firebase = require('firebase');
    console.log(FIREBASE_URL);
    var REF = function(id) {
        var ref = new Firebase(FIREBASE_URL).child('content').child(id);
        return ref;
    };

    var que = [];
    var ref = new REF(reportdata);

    ref.authAnonymously(function(error, authData) {
        if (error) {
            console.log("Authentication Failed!", error);
        } else {
            console.log("Authenticated successfully with payload:", authData);
        }
    });

    ref.once('value', function(dataSnapshot) {
        var data = dataSnapshot.exportVal();
        if (data.content) {
            fs.writeFileSync('./dist/' + date + '/' + data.id + '.html', data.content.replace('app.full.min.css', 'epub.css'), callback(data));
            que.push([]);
        } else {
            fs.writeFileSync('./dist/' + date + '/' + data.id + '.html', '<p>&nbsp;</p>', callback(data));
            que.push([]);
        }

    });





    var options = function(rdata) {
        var opt = this;
        opt = {};
        opt.title = rdata.title;
        opt.language = 'en';
        opt.author = rdata.author || rdata.patent.inventor || 'Anonymous';
        opt.description = rdata.description || rdata.patent.description || 'generated by Lion Legal Products Inc';
        opt.cover = cover(rdata);

        return opt;
    };

    var cover = function(rdata) {
        var data;
        if (rdata.cover){
            return rdata.cover;
        }
        else{
            try{
                data = fs.createReadStream(rdata.media); 
            }
            catch(ex){
                data = fs.createReadStream('../llp_core/img/GoldLion.png');
            }
            finally{
                return data.toString();
            }
        }
    };
    var add = function(data) {
            que.shift();
            console.log(que.length);
            if (que.length === 1) {
                return generator.generator.add('./content/' + data.id + '.html', fs.createReadStream('./dist/'+date+'/' + data.id + '.html'), { toc: true, title: data.title }).end(function() { return res.download(output); });
            }
            return generator.add('./content/' + data.id + '.html', fs.createReadStream('./dist/'+date+'/' + data.id + '.html'), { toc: true, title: data.title });

        };
        var snap = function(snapshot) {
            var data = snapshot.exportVal();
                if (data.content) { 
                    fs.writeFile('./dist/'+date+'/' + data.id + '.html', data.content.replace('app.full.min.css', 'style.css'), add(data)); }
                else { que.shift(); }


                console.log(data.id);
                if(data.roarlist){
                    myfunc(data);
                }

            };
            
        var myfunc = function(rdata) {
            for (var key in rdata.roarlist) {
                if (rdata.roarlist.hasOwnProperty(key)) {
                    var datasrc = new REF(key);
                    que.push(key);
                    datasrc.once('value', snap(snapshot));
                } 
            }   
        };

    var callback = function(rdata) {
        var file = fs.createWriteStream(output);

        var generator = new EpubGenerator(options(rdata));
        generator.add('./content/index.html', fs.createReadStream('./dist/' + rdata.id + '.html'), { toc: true, title: rdata.title });
        generator.add('./content/style.css', fs.createReadStream('../llp_core/dist/epub.css'));
        generator.add('./content/app.bower.js', fs.createReadStream('../llp_core/dist/app.bower.js'));
        generator.add('./content/app.ck.js', fs.createReadStream('../llp_core/dist/app.ck.js'));
        generator.add('./content/minicache.js', fs.createReadStream('../llp_core/dist/minicache.js'));
        
        
        myfunc(rdata);
        generator.pipe(file);   
    };
});

app.post('*', function(req, res, next) {
    var rdata = req.body.data || req.body;

    console.log(rdata);

    var d = new Date();
    var now = d.getTime();
    var output = now + '.epub';
    var option = {

        title: rdata.title,
        author: rdata.author || rdata.inventor,
        publisher: rdata.publisher || 'Lion Legal Products Inc',
        cover: rdata.cover || 'http://localhost:8000/patents/US' + rdata.number + '/preview',
        content: rdata.content

    };
    var gen = new Epub(option, output).promise.then(function() {

        console.log("Ebook Generated Successfully!")
        res.download(output);
    }, function(err) {
        console.error("Failed to generate Ebook because of ", err)
    });

    gen();

});

app.listen(process.env.port, function(){ console.log('epub on port ', process.env.port); });
